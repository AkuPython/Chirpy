// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const refreshTokenAdd = `-- name: RefreshTokenAdd :one
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at, revoked_at)
VALUES (
    $1, NOW(), NOW(), $2, $3, NULL
)
RETURNING token
`

type RefreshTokenAddParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) RefreshTokenAdd(ctx context.Context, arg RefreshTokenAddParams) (string, error) {
	row := q.db.QueryRowContext(ctx, refreshTokenAdd, arg.Token, arg.UserID, arg.ExpiresAt)
	var token string
	err := row.Scan(&token)
	return token, err
}

const refreshTokenGet = `-- name: RefreshTokenGet :one
SELECT token, created_at, updated_at, user_id, expires_at, revoked_at FROM refresh_tokens
WHERE token = $1
`

func (q *Queries) RefreshTokenGet(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, refreshTokenGet, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const refreshTokenRevoke = `-- name: RefreshTokenRevoke :exec
UPDATE refresh_tokens
SET updated_at = NOW(),
    revoked_at = NOW()
WHERE token = $1
`

func (q *Queries) RefreshTokenRevoke(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, refreshTokenRevoke, token)
	return err
}
